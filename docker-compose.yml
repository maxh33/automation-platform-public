services:
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n_automation
    restart: unless-stopped
    ports:
      - "127.0.0.1:5678:5678"
    environment:
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - WEBHOOK_URL=${WEBHOOK_URL:-http://localhost:5678}
      - GENERIC_TIMEZONE=${TIMEZONE:-UTC}
      - N8N_LOG_LEVEL=${N8N_LOG_LEVEL:-info}
      - N8N_LOG_OUTPUT=${N8N_LOG_OUTPUT:-console}
      - N8N_METRICS=true
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_VERSION_NOTIFICATIONS_ENABLED=false
      - N8N_TEMPLATES_ENABLED=true
      - N8N_ONBOARDING_FLOW_DISABLED=${N8N_ONBOARDING_FLOW_DISABLED:-false}
      - N8N_USER_MANAGEMENT_DISABLED=false
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_SECURE_COOKIE=${N8N_SECURE_COOKIE:-false}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-n8n}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - EXECUTIONS_PROCESS=main
      - EXECUTIONS_MODE=regular
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD}
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-false}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${SESSION_SECRET}
      - N8N_OWNER_EMAIL=${N8N_OWNER_EMAIL:-admin@localhost}
      - N8N_RUNNERS_ENABLED=${N8N_RUNNERS_ENABLED:-true}
      # Multi-tenant configuration with disk space optimization
      - N8N_PAYLOAD_SIZE_MAX=16
      - N8N_EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - N8N_EXECUTIONS_DATA_SAVE_ON_SUCCESS=${N8N_EXECUTIONS_DATA_SAVE_ON_SUCCESS:-first}
      - N8N_EXECUTIONS_DATA_SAVE_ON_PROGRESS=false
      - N8N_EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=false
      - N8N_EXECUTIONS_DATA_PRUNE=true
      - N8N_EXECUTIONS_DATA_MAX_AGE=${N8N_EXECUTIONS_DATA_MAX_AGE:-168}
      - N8N_BINARY_DATA_MODE=filesystem
      - N8N_BINARY_DATA_TTL=${N8N_BINARY_DATA_TTL:-24}
      - N8N_EXECUTIONS_DATA_HARD_DELETE_BUFFER=${N8N_EXECUTIONS_DATA_HARD_DELETE_BUFFER:-1}
      # External integrations (optional for local development)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows:/home/node/.n8n/custom-workflows:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=5678"
      - "prometheus.io/path=/metrics"
    networks:
      - automation_network

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-n8n}
      - POSTGRES_USER=${POSTGRES_USER:-n8n}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/setup/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-n8n} -d ${POSTGRES_DB:-n8n}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - automation_network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=5432"
      - "prometheus.io/path=/metrics"

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - automation_network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=6379"

  crawl4ai:
    image: unclecode/crawl4ai:latest
    container_name: crawl4ai
    restart: unless-stopped
    ports:
      - "127.0.0.1:11235:11235"
    environment:
      - MAX_CONCURRENT_CRAWLS=5
      - REQUEST_TIMEOUT=30
      - ENABLE_CACHING=true
      - CACHE_TTL=3600
      - CACHE_MAX_SIZE=500MB
      - LOG_LEVEL=INFO
    volumes:
      - crawl4ai_cache:/app/cache
      - crawl4ai_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11235/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - automation_network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=11235"
      - "prometheus.io/path=/metrics"

networks:
  automation_network:
    driver: bridge
    internal: false

volumes:
  n8n_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  crawl4ai_cache:
    driver: local
  crawl4ai_logs:
    driver: local