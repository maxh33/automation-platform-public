{
  "name": "E-commerce Price Monitoring & Updates",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 6 * * 1"
            }
          ]
        }
      },
      "id": "cron-trigger-monday-6am",
      "name": "Weekly Price Check",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        480,
        300
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "price-update",
        "responseMode": "responseNode"
      },
      "id": "webhook-price-manual",
      "name": "Manual Price Update",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        480,
        160
      ],
      "webhookId": "client-price-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.tenant_id || $env.CLIENT_TENANT_ID || 'default' }}",
              "operation": "equal",
              "value2": "={{ $env.ALLOWED_TENANT_ID || 'default' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "validate-tenant-access",
      "name": "Validate Tenant Access",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        230
      ]
    },
    {
      "parameters": {
        "url": "https://api.fxratesapi.com/latest?base=USD&symbols=XAU",
        "options": {
          "timeout": 10000
        }
      },
      "id": "get-gold-price-api",
      "name": "Get Gold Price",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        920,
        160
      ]
    },
    {
      "parameters": {
        "url": "https://api.exchangerate-api.com/v4/latest/USD",
        "options": {
          "timeout": 10000
        }
      },
      "id": "get-exchange-rates",
      "name": "Get BRL Exchange Rate",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        920,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Calculate gold price in BRL with client-specific markup\n// Helper function to safely extract gold price from different API formats\nfunction extractGoldPrice(goldData) {\n  // Try different possible structures and field names\n  const possiblePaths = [\n    // FXRates API format: {\"rates\": {\"XAU\": 0.000271}}\n    () => goldData.rates?.XAU,\n    // Metals-live format: {\"price\": 2650}\n    () => goldData.price,\n    // Alternative formats\n    () => goldData.gold,\n    () => goldData.value,\n    () => goldData.spot_price,\n    () => goldData.rate,\n    // Nested formats\n    () => goldData.data?.price,\n    () => goldData.result?.price,\n    () => goldData.gold?.price\n  ];\n  \n  for (const getPrice of possiblePaths) {\n    try {\n      const price = getPrice();\n      if (price !== undefined && price !== null) {\n        const numPrice = typeof price === 'string' ? parseFloat(price) : price;\n        if (!isNaN(numPrice) && numPrice > 0) {\n          return numPrice;\n        }\n      }\n    } catch (e) {\n      continue;\n    }\n  }\n  \n  return null;\n}\n\n// Get exchange rate data from current input\nconst exchangeData = $input.first().json;\nif (!exchangeData || !exchangeData.rates || typeof exchangeData.rates.BRL !== 'number') {\n  throw new Error('Invalid exchange rate data. Expected rates.BRL field.');\n}\nconst exchangeRate = exchangeData.rates.BRL;\n\n// Get gold price from previous node data\nconst goldData = $('Get Gold Price').first().json;\nconst goldPriceRaw = extractGoldPrice(goldData);\n\nif (!goldPriceRaw) {\n  throw new Error(`Invalid gold price data. Received: ${JSON.stringify(goldData)}`);\n}\n\n// FXRates API returns gold as fraction (e.g., 0.000271 USD per 1 USD = 1/gold_price_per_ounce)\n// So we need to convert: 1 / goldPriceRaw = price per ounce\nconst goldPriceUSD = 1 / goldPriceRaw;\n\n// Validate the calculated price is reasonable (gold should be $1000-$5000 per ounce)\nif (goldPriceUSD < 1000 || goldPriceUSD > 5000) {\n  throw new Error(`Calculated gold price seems unreasonable: $${goldPriceUSD.toFixed(2)} per ounce. Raw value: ${goldPriceRaw}`);\n}\n\n// Client configuration (could come from database or environment)\nconst clientConfig = {\n  markup_percentage: parseFloat($env.CLIENT_MARKUP_PERCENTAGE || '15'), // 15% default markup\n  weight_unit: $env.CLIENT_WEIGHT_UNIT || 'gram', // gram or ounce\n  price_format: $env.CLIENT_PRICE_FORMAT || 'BRL'\n};\n\n// Convert price per ounce to price per gram in BRL\nconst goldPriceBRLPerOunce = goldPriceUSD * exchangeRate;\nconst goldPriceBRLPerGram = goldPriceBRLPerOunce / 31.1035; // 1 ounce = 31.1035 grams\n\n// Apply client markup\nconst markupMultiplier = 1 + (clientConfig.markup_percentage / 100);\nconst finalPricePerGram = goldPriceBRLPerGram * markupMultiplier;\n\n// Calculate different product prices based on weight\nconst products = [\n  {\n    sku: 'GOLD_1G',\n    name: 'Gold 1g',\n    weight: 1,\n    base_price: finalPricePerGram,\n    final_price: Math.round(finalPricePerGram * 100) / 100\n  },\n  {\n    sku: 'GOLD_5G',\n    name: 'Gold 5g',\n    weight: 5,\n    base_price: finalPricePerGram * 5,\n    final_price: Math.round(finalPricePerGram * 5 * 100) / 100\n  },\n  {\n    sku: 'GOLD_10G',\n    name: 'Gold 10g',\n    weight: 10,\n    base_price: finalPricePerGram * 10,\n    final_price: Math.round(finalPricePerGram * 10 * 100) / 100\n  }\n];\n\nreturn {\n  json: {\n    tenant_id: $env.CLIENT_TENANT_ID || 'default',\n    timestamp: new Date().toISOString(),\n    gold_price_usd: goldPriceUSD,\n    exchange_rate_brl: exchangeRate,\n    price_per_gram_brl: finalPricePerGram,\n    markup_percentage: clientConfig.markup_percentage,\n    products: products,\n    calculation_date: new Date().toISOString().split('T')[0],\n    debug_info: {\n      raw_gold_data: goldData,\n      extracted_raw_price: goldPriceRaw,\n      calculated_usd_per_ounce: goldPriceUSD\n    }\n  }\n};"
      },
      "id": "calculate-product-prices",
      "name": "Calculate Product Prices",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1140,
        230
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT product_id, sku, current_price FROM products WHERE tenant_id = $1 AND category = 'gold'",
        "additionalFields": {
          "mode": "independently"
        },
        "options": {
          "queryBatching": "transaction"
        }
      },
      "id": "get-current-products",
      "name": "Get Current Products",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1360,
        160
      ],
      "credentials": {
        "postgres": {
          "id": "client-database",
          "name": "Client Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Merge current products with new prices\nconst newPrices = $input.first().json || {};\nconst currentProducts = Array.isArray($input.all()[1]?.json) ? $input.all()[1].json : [];\n\nconst updates = [];\nconst insertions = [];\n\n// Ensure products array exists\nconst products = Array.isArray(newPrices.products) ? newPrices.products : [];\n\n// Process each new product price\nfor (const newProduct of products) {\n  const existingProduct = currentProducts.find(p => p && p.sku === newProduct.sku);\n  \n  if (existingProduct && existingProduct.current_price) {\n    // Product exists, prepare update\n    const priceChange = newProduct.final_price - existingProduct.current_price;\n    const priceChangePercentage = (priceChange / existingProduct.current_price) * 100;\n    \n    updates.push({\n      product_id: existingProduct.product_id,\n      sku: newProduct.sku,\n      old_price: existingProduct.current_price,\n      new_price: newProduct.final_price,\n      price_change: priceChange,\n      price_change_percentage: priceChangePercentage,\n      weight: newProduct.weight,\n      update_required: Math.abs(priceChangePercentage) > 1 // Only update if >1% change\n    });\n  } else {\n    // New product, prepare insertion\n    insertions.push({\n      sku: newProduct.sku || '',\n      name: newProduct.name || '',\n      weight: newProduct.weight || 0,\n      price: newProduct.final_price || 0,\n      tenant_id: newPrices.tenant_id || 'default'\n    });\n  }\n}\n\nreturn {\n  json: {\n    tenant_id: newPrices.tenant_id || 'default',\n    timestamp: newPrices.timestamp || new Date().toISOString(),\n    gold_data: newPrices,\n    updates: updates,\n    insertions: insertions,\n    summary: {\n      total_products: products.length,\n      updates_needed: updates.filter(u => u && u.update_required).length,\n      new_products: insertions.length\n    }\n  }\n};"
      },
      "id": "merge-price-data",
      "name": "Merge Price Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1580,
        230
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.summary.updates_needed }}",
              "operation": "gt",
              "value2": 0
            }
          ]
        },
        "options": {}
      },
      "id": "check-updates-needed",
      "name": "Check if Updates Needed",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1800,
        230
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE products SET \n  current_price = $2,\n  previous_price = current_price,\n  updated_at = NOW(),\n  price_change_percentage = $3\nWHERE product_id = $1 AND tenant_id = $4",
        "additionalFields": {
          "mode": "independently"
        },
        "options": {
          "queryBatching": "transaction"
        }
      },
      "id": "update-product-prices",
      "name": "Update Product Prices",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        2020,
        160
      ],
      "credentials": {
        "postgres": {
          "id": "client-database",
          "name": "Client Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "price_history",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tenant_id": "={{ $json.tenant_id }}",
            "gold_price_usd": "={{ $json.gold_data.gold_price_usd }}",
            "exchange_rate": "={{ $json.gold_data.exchange_rate_brl }}",
            "price_per_gram": "={{ $json.gold_data.price_per_gram_brl }}",
            "markup_percentage": "={{ $json.gold_data.markup_percentage }}",
            "created_at": "={{ $json.timestamp }}",
            "updates_applied": "={{ $json.summary.updates_needed }}",
            "calculation_data": "={{ JSON.stringify($json.gold_data) }}"
          },
          "matchingColumns": [],
          "schema": []
        },
        "options": {}
      },
      "id": "log-price-history",
      "name": "Log Price History",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        2020,
        320
      ],
      "credentials": {
        "postgres": {
          "id": "client-database",
          "name": "Client Database"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.CLIENT_NOTIFICATION_WEBHOOK }}",
        "sendBody": true,
        "bodyContent": "={\n  \"type\": \"price_update\",\n  \"tenant_id\": \"{{ $json.tenant_id }}\",\n  \"timestamp\": \"{{ $json.timestamp }}\",\n  \"summary\": {\n    \"updates_applied\": {{ $json.summary.updates_needed }},\n    \"gold_price_usd\": {{ $json.gold_data.gold_price_usd }},\n    \"exchange_rate_brl\": {{ $json.gold_data.exchange_rate_brl }},\n    \"markup_percentage\": {{ $json.gold_data.markup_percentage }}\n  },\n  \"products_updated\": {{ JSON.stringify($json.updates.filter(u => u.update_required)) }}\n}",
        "options": {
          "timeout": 5000
        }
      },
      "id": "notify-client",
      "name": "Notify Client",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        2240,
        240
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"Price monitoring completed\",\n  \"summary\": {{ JSON.stringify($json.summary) }},\n  \"timestamp\": \"{{ $json.timestamp }}\",\n  \"tenant_id\": \"{{ $json.tenant_id }}\"\n}",
        "options": {}
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2240,
        400
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": false,\n  \"message\": \"No price updates needed\",\n  \"summary\": {{ JSON.stringify($json.summary) }},\n  \"timestamp\": \"{{ $json.timestamp }}\",\n  \"tenant_id\": \"{{ $json.tenant_id }}\"\n}",
        "options": {}
      },
      "id": "no-updates-response",
      "name": "No Updates Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2020,
        480
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": false,\n  \"error\": \"Unauthorized: Invalid tenant access\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
        "responseCode": 403,
        "options": {}
      },
      "id": "unauthorized-response",
      "name": "Unauthorized Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        920,
        600
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Weekly Price Check": {
      "main": [
        [
          {
            "node": "Validate Tenant Access",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Price Update": {
      "main": [
        [
          {
            "node": "Validate Tenant Access",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Tenant Access": {
      "main": [
        [
          {
            "node": "Get Gold Price",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unauthorized Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Gold Price": {
      "main": [
        [
          {
            "node": "Get BRL Exchange Rate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get BRL Exchange Rate": {
      "main": [
        [
          {
            "node": "Calculate Product Prices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Product Prices": {
      "main": [
        [
          {
            "node": "Get Current Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Current Products": {
      "main": [
        [
          {
            "node": "Merge Price Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Price Data": {
      "main": [
        [
          {
            "node": "Check if Updates Needed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Updates Needed": {
      "main": [
        [
          {
            "node": "Update Product Prices",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log Price History",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Updates Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Product Prices": {
      "main": [
        [
          {
            "node": "Notify Client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Price History": {
      "main": [
        [
          {
            "node": "Notify Client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notify Client": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": {
      "id": "",
      "name": ""
    }
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "automation-platform-template"
  },
  "id": "ecommerce-price-monitoring-template",
  "tags": [
    {
      "createdAt": "2024-09-16T00:00:00.000Z",
      "updatedAt": "2024-09-16T00:00:00.000Z",
      "id": "template",
      "name": "Template"
    },
    {
      "createdAt": "2024-09-16T00:00:00.000Z",
      "updatedAt": "2024-09-16T00:00:00.000Z",
      "id": "ecommerce",
      "name": "E-commerce"
    },
    {
      "createdAt": "2024-09-16T00:00:00.000Z",
      "updatedAt": "2024-09-16T00:00:00.000Z",
      "id": "price-monitoring",
      "name": "Price Monitoring"
    },
    {
      "createdAt": "2024-09-16T00:00:00.000Z",
      "updatedAt": "2024-09-16T00:00:00.000Z",
      "id": "multi-tenant",
      "name": "Multi-Tenant"
    }
  ]
}