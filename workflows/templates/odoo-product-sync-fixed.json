{
  "name": "Odoo Multi-Platform Product Synchronization",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "odoo-product-sync",
        "options": {
          "rawBody": true
        }
      },
      "id": "webhook-product-sync",
      "name": "Product Sync Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [300, 300],
      "webhookId": "odoo-product-sync"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 */4 * * *"
            }
          ]
        }
      },
      "id": "cron-sync-trigger",
      "name": "Every 4 Hours Sync",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [300, 500]
    },
    {
      "parameters": {
        "jsCode": "// Validate and prepare sync request\nconst data = $input.first().json;\n\n// Handle both webhook and cron triggers\nlet syncConfig;\n\nif (data.tenant_id) {\n  // Webhook trigger - specific tenant sync\n  syncConfig = {\n    tenant_id: data.tenant_id,\n    sync_direction: data.sync_direction || 'bidirectional',\n    platforms: data.platforms || ['woocommerce'],\n    product_filters: data.product_filters || {},\n    force_update: data.force_update || false,\n    batch_size: data.batch_size || 50\n  };\n} else {\n  // Cron trigger - sync all active tenants\n  syncConfig = {\n    sync_all_tenants: true,\n    sync_direction: 'bidirectional',\n    platforms: ['woocommerce', 'shopify'],\n    force_update: false,\n    batch_size: 25\n  };\n}\n\nreturn { json: syncConfig };"
      },
      "id": "prepare-sync-config",
      "name": "Prepare Sync Configuration",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [500, 400]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.sync_all_tenants }}",
              "value2": true
            }
          ]
        }
      },
      "id": "check-sync-type",
      "name": "Check Sync Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [700, 400]
    },
    {
      "parameters": {
        "url": "http://odoo_postgres:5432",
        "query": "SELECT tenant_id, business_type, api_endpoint, config FROM odoo_tenant_configs WHERE status = 'active'",
        "values": ""
      },
      "id": "get-all-tenants",
      "name": "Get All Active Tenants",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "http://odoo_postgres:5432",
        "query": "SELECT tenant_id, business_type, api_endpoint, config FROM odoo_tenant_configs WHERE tenant_id = $1 AND status = 'active'",
        "values": "={{ $json.tenant_id }}"
      },
      "id": "get-single-tenant",
      "name": "Get Single Tenant",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [900, 500]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {
          "reset": false
        }
      },
      "id": "split-tenants",
      "name": "Split Tenants for Processing",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1100, 400]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "awsSecretsManager",
        "region": "us-east-1",
        "secretId": "n8n/tenants/{{ $json.tenant_id }}/ecommerce-credentials"
      },
      "id": "get-ecommerce-credentials",
      "name": "Get E-commerce Credentials",
      "type": "n8n-nodes-base.awsSecretsManager",
      "typeVersion": 1,
      "position": [1300, 400]
    },
    {
      "parameters": {
        "url": "={{ $json.api_endpoint }}/products",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "odooApi",
        "method": "GET",
        "options": {
          "qs": {
            "limit": "={{ $('prepare-sync-config').first().json.batch_size }}",
            "fields": "id,name,default_code,list_price,standard_price,description,description_sale,active,weight,image_1920,categ_id,qty_available,uom_id"
          }
        }
      },
      "id": "get-odoo-products",
      "name": "Get Odoo Products",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1500, 400]
    },
    {
      "parameters": {
        "jsCode": "// Process products for multi-platform sync\nconst odooProducts = $json.data || [];\nconst tenantConfig = $('split-tenants').first().json;\nconst syncConfig = $('prepare-sync-config').first().json;\nconst ecommerceCredentials = $('get-ecommerce-credentials').first().json;\n\nconst processedProducts = [];\n\nfor (const product of odooProducts) {\n  const baseProduct = {\n    odoo_id: product.id,\n    name: product.name,\n    sku: product.default_code,\n    price: product.list_price,\n    cost_price: product.standard_price,\n    description: product.description || product.description_sale,\n    short_description: product.description_sale,\n    weight: product.weight,\n    stock_quantity: product.qty_available,\n    manage_stock: true,\n    in_stock: product.qty_available > 0,\n    status: product.active ? 'publish' : 'draft',\n    tenant_id: tenantConfig.tenant_id,\n    business_type: tenantConfig.business_type\n  };\n\n  // Business-type specific transformations\n  if (tenantConfig.business_type === 'jewelry') {\n    const jewelryData = extractJewelryAttributes(product);\n    baseProduct.metal_type = jewelryData.metal_type;\n    baseProduct.metal_karat = jewelryData.metal_karat;\n    baseProduct.gemstone_type = jewelryData.gemstone_type;\n    baseProduct.craftsmanship_level = jewelryData.craftsmanship_level;\n  }\n\n  // Platform-specific sync operations\n  syncConfig.platforms.forEach(platform => {\n    if (ecommerceCredentials[platform]) {\n      processedProducts.push({\n        ...baseProduct,\n        platform: platform,\n        platform_credentials: ecommerceCredentials[platform],\n        sync_action: determineSyncAction(product, platform, syncConfig)\n      });\n    }\n  });\n}\n\nfunction extractJewelryAttributes(product) {\n  const name = (product.name || '').toLowerCase();\n  const description = (product.description || '').toLowerCase();\n  const text = name + ' ' + description;\n\n  return {\n    metal_type: detectMetalType(text),\n    metal_karat: detectKarat(text),\n    gemstone_type: detectGemstone(text),\n    craftsmanship_level: detectCraftsmanship(text)\n  };\n}\n\nfunction detectMetalType(text) {\n  if (text.includes('ouro') || text.includes('gold')) return 'gold';\n  if (text.includes('prata') || text.includes('silver')) return 'silver';\n  if (text.includes('platina') || text.includes('platinum')) return 'platinum';\n  return null;\n}\n\nfunction detectKarat(text) {\n  const karatMatch = text.match(/(\\\\d+)k|quilates\\\\s*(\\\\d+)/);\n  return karatMatch ? (karatMatch[1] || karatMatch[2]) : null;\n}\n\nfunction detectGemstone(text) {\n  const gemstones = ['diamante', 'esmeralda', 'rubi', 'safira', 'topazio', 'ametista'];\n  for (const gem of gemstones) {\n    if (text.includes(gem)) return gem;\n  }\n  return null;\n}\n\nfunction detectCraftsmanship(text) {\n  if (text.includes('artesanal') || text.includes('handcrafted')) return 'artisan';\n  if (text.includes('premium') || text.includes('luxury')) return 'premium';\n  return 'standard';\n}\n\nfunction determineSyncAction(product, platform, syncConfig) {\n  if (syncConfig.force_update) return 'update';\n  if (product.default_code) {\n    return 'update';\n  }\n  return 'create';\n}\n\nreturn processedProducts.map(product => ({ json: product }));"
      },
      "id": "process-products-for-sync",
      "name": "Process Products for Multi-Platform",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1700, 400]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {
          "reset": false
        }
      },
      "id": "split-products",
      "name": "Split Products for Platform Sync",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1900, 400]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.platform }}",
              "operation": "equal",
              "value2": "woocommerce"
            }
          ]
        }
      },
      "id": "check-platform-type",
      "name": "Check Platform Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2100, 400]
    },
    {
      "parameters": {
        "url": "={{ $json.platform_credentials.url }}/wp-json/wc/v3/products",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "wooCommerceApi",
        "method": "={{ $json.sync_action === 'create' ? 'POST' : 'PUT' }}",
        "options": {
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "name": "={{ $json.name }}",
            "sku": "={{ $json.sku }}",
            "regular_price": "={{ $json.price }}",
            "description": "={{ $json.description }}",
            "short_description": "={{ $json.short_description }}",
            "weight": "={{ $json.weight }}",
            "manage_stock": true,
            "stock_quantity": "={{ $json.stock_quantity }}",
            "status": "={{ $json.status }}",
            "meta_data": [
              {
                "key": "_odoo_id",
                "value": "={{ $json.odoo_id }}"
              },
              {
                "key": "_tenant_id",
                "value": "={{ $json.tenant_id }}"
              },
              {
                "key": "_business_type",
                "value": "={{ $json.business_type }}"
              }
            ]
          }
        }
      },
      "id": "sync-to-woocommerce",
      "name": "Sync to WooCommerce",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2300, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.platform_credentials.url }}/admin/api/2023-10/products.json",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "shopifyApi",
        "method": "={{ $json.sync_action === 'create' ? 'POST' : 'PUT' }}",
        "options": {
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "product": {
              "title": "={{ $json.name }}",
              "vendor": "={{ $json.tenant_id }}",
              "product_type": "={{ $json.business_type }}",
              "variants": [
                {
                  "sku": "={{ $json.sku }}",
                  "price": "={{ $json.price }}",
                  "weight": "={{ $json.weight }}",
                  "inventory_quantity": "={{ $json.stock_quantity }}",
                  "inventory_management": "shopify"
                }
              ],
              "metafields": [
                {
                  "namespace": "odoo",
                  "key": "product_id",
                  "value": "={{ $json.odoo_id }}",
                  "type": "number_integer"
                },
                {
                  "namespace": "tenant",
                  "key": "tenant_id",
                  "value": "={{ $json.tenant_id }}",
                  "type": "single_line_text_field"
                }
              ]
            }
          }
        }
      },
      "id": "sync-to-shopify",
      "name": "Sync to Shopify",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2300, 500]
    },
    {
      "parameters": {
        "url": "http://odoo_postgres:5432",
        "query": "INSERT INTO product_sync_log (tenant_id, odoo_product_id, platform, platform_product_id, sync_action, sync_status, sync_data, created_at) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW()) ON CONFLICT (tenant_id, odoo_product_id, platform) DO UPDATE SET platform_product_id = $4, sync_action = $5, sync_status = $6, sync_data = $7, updated_at = NOW()",
        "values": "={{ $json.tenant_id }},={{ $json.odoo_id }},={{ $json.platform }},={{ $json.id || 'failed' }},={{ $json.sync_action }},={{ $json.id ? 'success' : 'failed' }},={{ JSON.stringify($json) }}"
      },
      "id": "log-sync-result",
      "name": "Log Sync Result",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [2500, 400]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $('split-products').item.json.isDone }}",
              "value2": true
            }
          ]
        }
      },
      "id": "check-products-completion",
      "name": "Check Products Completion",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2700, 400]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $('split-tenants').item.json.isDone }}",
              "value2": true
            }
          ]
        }
      },
      "id": "check-tenants-completion",
      "name": "Check Tenants Completion",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2900, 400]
    },
    {
      "parameters": {
        "jsCode": "// Generate sync summary report\nconst allResults = $input.all();\nconst tenantResults = {};\n\n// Group results by tenant\nfor (const result of allResults) {\n  const data = result.json;\n  if (!tenantResults[data.tenant_id]) {\n    tenantResults[data.tenant_id] = {\n      tenant_id: data.tenant_id,\n      business_type: data.business_type,\n      total_products: 0,\n      successful_syncs: 0,\n      failed_syncs: 0,\n      platforms: {}\n    };\n  }\n  \n  const tenant = tenantResults[data.tenant_id];\n  tenant.total_products++;\n  \n  if (data.id) {\n    tenant.successful_syncs++;\n  } else {\n    tenant.failed_syncs++;\n  }\n  \n  if (!tenant.platforms[data.platform]) {\n    tenant.platforms[data.platform] = { success: 0, failed: 0 };\n  }\n  \n  if (data.id) {\n    tenant.platforms[data.platform].success++;\n  } else {\n    tenant.platforms[data.platform].failed++;\n  }\n}\n\nconst summary = {\n  sync_completed_at: new Date().toISOString(),\n  total_tenants: Object.keys(tenantResults).length,\n  tenant_results: Object.values(tenantResults),\n  overall_stats: {\n    total_products: Object.values(tenantResults).reduce((sum, t) => sum + t.total_products, 0),\n    successful_syncs: Object.values(tenantResults).reduce((sum, t) => sum + t.successful_syncs, 0),\n    failed_syncs: Object.values(tenantResults).reduce((sum, t) => sum + t.failed_syncs, 0)\n  }\n};\n\nreturn { json: summary };"
      },
      "id": "generate-sync-summary",
      "name": "Generate Sync Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3100, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{{ JSON.stringify($json, null, 2) }}"
      },
      "id": "return-sync-results",
      "name": "Return Sync Results",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [3300, 300]
    }
  ],
  "connections": {
    "webhook-product-sync": {
      "main": [
        [
          {
            "node": "prepare-sync-config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cron-sync-trigger": {
      "main": [
        [
          {
            "node": "prepare-sync-config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare-sync-config": {
      "main": [
        [
          {
            "node": "check-sync-type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-sync-type": {
      "main": [
        [
          {
            "node": "get-all-tenants",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get-single-tenant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-all-tenants": {
      "main": [
        [
          {
            "node": "split-tenants",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-single-tenant": {
      "main": [
        [
          {
            "node": "split-tenants",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split-tenants": {
      "main": [
        [
          {
            "node": "get-ecommerce-credentials",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-ecommerce-credentials": {
      "main": [
        [
          {
            "node": "get-odoo-products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-odoo-products": {
      "main": [
        [
          {
            "node": "process-products-for-sync",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-products-for-sync": {
      "main": [
        [
          {
            "node": "split-products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split-products": {
      "main": [
        [
          {
            "node": "check-platform-type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-platform-type": {
      "main": [
        [
          {
            "node": "sync-to-woocommerce",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "sync-to-shopify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sync-to-woocommerce": {
      "main": [
        [
          {
            "node": "log-sync-result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sync-to-shopify": {
      "main": [
        [
          {
            "node": "log-sync-result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "log-sync-result": {
      "main": [
        [
          {
            "node": "check-products-completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-products-completion": {
      "main": [
        [
          {
            "node": "check-tenants-completion",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "split-products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-tenants-completion": {
      "main": [
        [
          {
            "node": "generate-sync-summary",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "split-tenants",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate-sync-summary": {
      "main": [
        [
          {
            "node": "return-sync-results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}