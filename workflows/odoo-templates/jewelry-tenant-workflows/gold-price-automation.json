{
  "name": "Jewelry Store - Gold Price Automation",
  "template_info": {
    "name": "Gold Price Automation for Jewelry Stores",
    "business_types": ["jewelry"],
    "version": "1.0.0",
    "description": "Automated gold price monitoring and product price updates for jewelry businesses",
    "required_credentials": ["gold_api_key", "odoo_api", "ecommerce_credentials"],
    "schedule_type": "cron",
    "dependencies": ["odoo-enhanced-price-monitoring"]
  },
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 6 * * 1,3,5"
            }
          ]
        }
      },
      "id": "cron-gold-price-check",
      "name": "Monday/Wednesday/Friday 6AM",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [300, 300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "{{ $env.TENANT_ID }}-gold-price-update",
        "options": {
          "rawBody": true
        }
      },
      "id": "webhook-manual-update",
      "name": "Manual Gold Price Update",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [300, 500],
      "webhookId": "{{ $env.TENANT_ID }}-gold-price-update"
    },
    {
      "parameters": {
        "jsCode": "// Validate tenant and prepare jewelry-specific price update\nconst data = $input.first().json || {};\nconst tenantId = $env.TENANT_ID;\n\nif (!tenantId) {\n  throw new Error('TENANT_ID environment variable not set');\n}\n\n// Jewelry-specific configuration\nconst jewelryConfig = {\n  tenant_id: tenantId,\n  business_type: 'jewelry',\n  price_sources: ['gold_api', 'silver_api', 'platinum_api'],\n  metal_types: ['gold', 'silver', 'platinum'],\n  karat_levels: ['10', '14', '18', '22', '24'],\n  force_update: data.force_update || false,\n  update_thresholds: {\n    minimum_change_percent: 1.5,\n    significant_change_percent: 5.0\n  },\n  platforms: ['odoo', 'woocommerce', 'shopify']\n};\n\nreturn { json: jewelryConfig };"
      },
      "id": "prepare-jewelry-config",
      "name": "Prepare Jewelry Price Config",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [500, 400]
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "awsSecretsManager",
        "region": "us-east-1",
        "secretId": "n8n/tenants/{{ $env.TENANT_ID }}/pricing-rules"
      },
      "id": "get-jewelry-pricing-rules",
      "name": "Get Jewelry Pricing Rules",
      "type": "n8n-nodes-base.awsSecretsManager",
      "typeVersion": 1,
      "position": [700, 400]
    },
    {
      "parameters": {
        "url": "https://api.metals.live/v1/spot",
        "options": {
          "headers": {
            "X-API-KEY": "{{ $env.GOLD_PRICE_API_KEY }}"
          },
          "timeout": 10000,
          "qs": {
            "metals": "gold,silver,platinum",
            "currency": "USD"
          }
        }
      },
      "id": "get-precious-metals-prices",
      "name": "Get Precious Metals Prices",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [900, 200]
    },
    {
      "parameters": {
        "url": "https://api.exchangerate-api.com/v4/latest/USD",
        "options": {
          "timeout": 10000
        }
      },
      "id": "get-exchange-rates",
      "name": "Get Exchange Rates",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [900, 400]
    },
    {
      "parameters": {
        "url": "https://api.odoo.your-domain.com/tenant/{{ $env.TENANT_ID }}/products",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "odooApi",
        "method": "GET",
        "options": {
          "qs": {
            "filter": "[('x_metal_type', 'in', ['gold', 'silver', 'platinum'])]",
            "fields": "id,name,default_code,list_price,x_metal_type,x_metal_karat,x_weight,x_last_price_update"
          }
        }
      },
      "id": "get-jewelry-products",
      "name": "Get Jewelry Products from Odoo",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [900, 600]
    },
    {
      "parameters": {
        "jsCode": "// Calculate jewelry-specific prices with precious metals logic\nconst metalsData = $('get-precious-metals-prices').first().json;\nconst exchangeData = $('get-exchange-rates').first().json;\nconst pricingRules = $('get-jewelry-pricing-rules').first().json;\nconst jewelryProducts = $('get-jewelry-products').first().json.data || [];\nconst config = $('prepare-jewelry-config').first().json;\n\n// Extract market prices\nconst goldPriceUSD = metalsData.gold?.price || 2650;\nconst silverPriceUSD = metalsData.silver?.price || 32;\nconst platinumPriceUSD = metalsData.platinum?.price || 1200;\nconst exchangeRate = exchangeData.rates?.BRL || 5.2;\n\n// Convert to BRL per gram\nconst goldPriceBRLPerGram = (goldPriceUSD * exchangeRate) / 31.1035;\nconst silverPriceBRLPerGram = (silverPriceUSD * exchangeRate) / 31.1035;\nconst platinumPriceBRLPerGram = (platinumPriceUSD * exchangeRate) / 31.1035;\n\n// Jewelry-specific pricing logic\nconst karatPurities = {\n  '24': 1.0,\n  '22': 0.916,\n  '18': 0.75,\n  '14': 0.585,\n  '10': 0.417\n};\n\nconst metalPricesPerGram = {\n  'gold': goldPriceBRLPerGram,\n  'silver': silverPriceBRLPerGram,\n  'platinum': platinumPriceBRLPerGram\n};\n\n// Get pricing rules from AWS Secrets\nconst markupRules = pricingRules.markup_rules || {\n  '24': 2.8, '22': 2.6, '18': 2.5, '14': 2.3, '10': 2.1\n};\n\nconst laborCosts = pricingRules.labor_costs || {\n  '24': 35, '22': 30, '18': 25, '14': 20, '10': 15\n};\n\nconst productsToUpdate = [];\n\n// Calculate new prices for each jewelry product\nfor (const product of jewelryProducts) {\n  const metalType = product.x_metal_type;\n  const karat = product.x_metal_karat || '18';\n  const weight = parseFloat(product.x_weight) || 1;\n  \n  if (!metalType || !metalPricesPerGram[metalType]) {\n    continue; // Skip products without metal type\n  }\n  \n  const basePricePerGram = metalPricesPerGram[metalType];\n  const purity = karatPurities[karat] || 0.75;\n  const markup = markupRules[karat] || 2.5;\n  const laborCost = laborCosts[karat] || 25;\n  \n  // Calculate material cost\n  const materialCost = basePricePerGram * purity * weight;\n  \n  // Add labor cost (per gram)\n  const totalLaborCost = laborCost * weight;\n  \n  // Apply markup\n  const newPrice = (materialCost + totalLaborCost) * markup;\n  \n  // Round to 2 decimal places\n  const finalPrice = Math.round(newPrice * 100) / 100;\n  \n  // Check if price change meets threshold\n  const oldPrice = product.list_price || 0;\n  const priceChangePercent = oldPrice > 0 ? ((finalPrice - oldPrice) / oldPrice) * 100 : 100;\n  \n  const shouldUpdate = config.force_update || \n                      Math.abs(priceChangePercent) >= config.update_thresholds.minimum_change_percent;\n  \n  if (shouldUpdate) {\n    productsToUpdate.push({\n      odoo_id: product.id,\n      sku: product.default_code,\n      name: product.name,\n      metal_type: metalType,\n      karat: karat,\n      weight: weight,\n      old_price: oldPrice,\n      new_price: finalPrice,\n      price_change: finalPrice - oldPrice,\n      price_change_percent: priceChangePercent,\n      material_cost: Math.round(materialCost * 100) / 100,\n      labor_cost: totalLaborCost,\n      markup_multiplier: markup,\n      market_data: {\n        base_price_per_gram: Math.round(basePricePerGram * 100) / 100,\n        purity: purity,\n        exchange_rate: exchangeRate\n      }\n    });\n  }\n}\n\n// Categorize updates by significance\nconst significantUpdates = productsToUpdate.filter(p => \n  Math.abs(p.price_change_percent) >= config.update_thresholds.significant_change_percent\n);\n\nconst minorUpdates = productsToUpdate.filter(p => \n  Math.abs(p.price_change_percent) < config.update_thresholds.significant_change_percent\n);\n\nreturn {\n  json: {\n    tenant_id: config.tenant_id,\n    business_type: 'jewelry',\n    timestamp: new Date().toISOString(),\n    market_data: {\n      gold_price_usd: goldPriceUSD,\n      silver_price_usd: silverPriceUSD,\n      platinum_price_usd: platinumPriceUSD,\n      exchange_rate_brl: exchangeRate,\n      gold_price_brl_per_gram: Math.round(goldPriceBRLPerGram * 100) / 100,\n      silver_price_brl_per_gram: Math.round(silverPriceBRLPerGram * 100) / 100,\n      platinum_price_brl_per_gram: Math.round(platinumPriceBRLPerGram * 100) / 100\n    },\n    products_to_update: productsToUpdate,\n    update_summary: {\n      total_products_checked: jewelryProducts.length,\n      products_to_update: productsToUpdate.length,\n      significant_updates: significantUpdates.length,\n      minor_updates: minorUpdates.length,\n      force_update: config.force_update\n    }\n  }\n};"
      },
      "id": "calculate-jewelry-prices",
      "name": "Calculate Jewelry Prices",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1100, 400]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.products_to_update.length }}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "id": "check-products-to-update",
      "name": "Check if Products Need Update",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1300, 400]
    },
    {
      "parameters": {
        "batchSize": 10,
        "options": {
          "reset": false
        }
      },
      "id": "split-products-batch",
      "name": "Split Products for Batch Update",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1500, 300]
    },
    {
      "parameters": {
        "url": "https://api.odoo.your-domain.com/tenant/{{ $env.TENANT_ID }}/products/batch-update",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "odooApi",
        "method": "PUT",
        "options": {
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "products": "={{ $json.products_to_update }}",
            "update_metadata": {\n              \"source\": \"gold_price_automation\",\n              \"timestamp\": \"={{ $json.timestamp }}\",\n              \"market_data\": \"={{ $json.market_data }}\"\n            }\n          }\n        }\n      },\n      \"id\": \"update-odoo-jewelry-prices\",\n      \"name\": \"Update Odoo Jewelry Prices\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 3,\n      \"position\": [1700, 300]\n    },\n    {\n      \"parameters\": {\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"awsSecretsManager\",\n        \"region\": \"us-east-1\",\n        \"secretId\": \"n8n/tenants/{{ $env.TENANT_ID }}/ecommerce-credentials\"\n      },\n      \"id\": \"get-ecommerce-credentials\",\n      \"name\": \"Get E-commerce Credentials\",\n      \"type\": \"n8n-nodes-base.awsSecretsManager\",\n      \"typeVersion\": 1,\n      \"position\": [1700, 500]\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// Sync updated jewelry prices to e-commerce platforms\\nconst products = $json.products_to_update || [];\\nconst ecommerceCredentials = $('get-ecommerce-credentials').first().json;\\nconst tenantId = $env.TENANT_ID;\\n\\nconst platformUpdates = [];\\n\\n// Process each product for each e-commerce platform\\nproducts.forEach(product => {\\n  // WooCommerce update\\n  if (ecommerceCredentials.woocommerce) {\\n    platformUpdates.push({\\n      platform: 'woocommerce',\\n      credentials: ecommerceCredentials.woocommerce,\\n      product_data: {\\n        sku: product.sku,\\n        regular_price: product.new_price.toString(),\\n        meta_data: [\\n          {\\n            key: '_gold_price_updated',\\n            value: new Date().toISOString()\\n          },\\n          {\\n            key: '_metal_type',\\n            value: product.metal_type\\n          },\\n          {\\n            key: '_karat',\\n            value: product.karat\\n          },\\n          {\\n            key: '_weight',\\n            value: product.weight.toString()\\n          },\\n          {\\n            key: '_material_cost',\\n            value: product.material_cost.toString()\\n          },\\n          {\\n            key: '_price_change_percent',\\n            value: product.price_change_percent.toString()\\n          }\\n        ]\\n      },\\n      tenant_id: tenantId,\\n      jewelry_product: product\\n    });\\n  }\\n  \\n  // Shopify update\\n  if (ecommerceCredentials.shopify) {\\n    platformUpdates.push({\\n      platform: 'shopify',\\n      credentials: ecommerceCredentials.shopify,\\n      product_data: {\\n        variants: [{\\n          sku: product.sku,\\n          price: product.new_price.toString()\\n        }],\\n        metafields: [\\n          {\\n            namespace: 'jewelry',\\n            key: 'metal_type',\\n            value: product.metal_type,\\n            type: 'single_line_text_field'\\n          },\\n          {\\n            namespace: 'jewelry',\\n            key: 'karat',\\n            value: product.karat,\\n            type: 'single_line_text_field'\\n          },\\n          {\\n            namespace: 'pricing',\\n            key: 'last_gold_update',\\n            value: new Date().toISOString(),\\n            type: 'single_line_text_field'\\n          }\\n        ]\\n      },\\n      tenant_id: tenantId,\\n      jewelry_product: product\\n    });\\n  }\\n});\\n\\nreturn platformUpdates.map(update => ({ json: update }));\"\n      },\n      \"id\": \"prepare-ecommerce-jewelry-updates\",\n      \"name\": \"Prepare E-commerce Jewelry Updates\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [1900, 500]\n    },\n    {\n      \"parameters\": {\n        \"batchSize\": 1,\n        \"options\": {\n          \"reset\": false\n        }\n      },\n      \"id\": \"split-platform-updates\",\n      \"name\": \"Split Platform Updates\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"typeVersion\": 3,\n      \"position\": [2100, 500]\n    },\n    {\n      \"parameters\": {\n        \"conditions\": {\n          \"string\": [\n            {\n              \"value1\": \"={{ $json.platform }}\",\n              \"operation\": \"equal\",\n              \"value2\": \"woocommerce\"\n            }\n          ]\n        }\n      },\n      \"id\": \"check-platform-type\",\n      \"name\": \"Check Platform Type\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"typeVersion\": 1,\n      \"position\": [2300, 500]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"={{ $json.credentials.url }}/wp-json/wc/v3/products\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"wooCommerceApi\",\n        \"method\": \"POST\",\n        \"options\": {\n          \"headers\": {\n            \"Content-Type\": \"application/json\"\n          },\n          \"qs\": {\n            \"sku\": \"={{ $json.product_data.sku }}\"\n          },\n          \"body\": \"={{ $json.product_data }}\"\n        }\n      },\n      \"id\": \"update-woocommerce-jewelry\",\n      \"name\": \"Update WooCommerce Jewelry\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 3,\n      \"position\": [2500, 400]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"={{ $json.credentials.url }}/admin/api/2023-10/products.json\",\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"shopifyApi\",\n        \"method\": \"POST\",\n        \"options\": {\n          \"headers\": {\n            \"Content-Type\": \"application/json\"\n          },\n          \"body\": {\n            \"product\": \"={{ $json.product_data }}\"\n          }\n        }\n      },\n      \"id\": \"update-shopify-jewelry\",\n      \"name\": \"Update Shopify Jewelry\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"typeVersion\": 3,\n      \"position\": [2500, 600]\n    },\n    {\n      \"parameters\": {\n        \"conditions\": {\n          \"number\": [\n            {\n              \"value1\": \"={{ $json.update_summary.significant_updates }}\",\n              \"operation\": \"larger\",\n              \"value2\": 0\n            }\n          ]\n        }\n      },\n      \"id\": \"check-significant-changes\",\n      \"name\": \"Check for Significant Changes\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"typeVersion\": 1,\n      \"position\": [1300, 600]\n    },\n    {\n      \"parameters\": {\n        \"authentication\": \"predefinedCredentialType\",\n        \"nodeCredentialType\": \"emailProvider\",\n        \"to\": \"={{ $env.ADMIN_EMAIL }}\",\n        \"cc\": \"{{ $env.TENANT_ADMIN_EMAIL }}\",\n        \"subject\": \"🥇 Significant Gold Price Changes - {{ $env.TENANT_NAME }}\",\n        \"emailFormat\": \"html\",\n        \"message\": \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <style>\\n        body { font-family: Arial, sans-serif; line-height: 1.6; }\\n        .container { max-width: 600px; margin: 0 auto; padding: 20px; }\\n        .header { background: #d4af37; color: white; padding: 20px; text-align: center; }\\n        .content { padding: 20px; background: #f9f9f9; }\\n        .price-update { background: white; padding: 15px; margin: 10px 0; border-left: 4px solid #d4af37; }\\n        .significant { border-left-color: #e74c3c; }\\n        .market-data { background: #e8f4f8; padding: 15px; margin: 15px 0; }\\n        .footer { text-align: center; color: #666; font-size: 12px; margin-top: 20px; }\\n        .price-change-up { color: #e74c3c; font-weight: bold; }\\n        .price-change-down { color: #27ae60; font-weight: bold; }\\n    </style>\\n</head>\\n<body>\\n    <div class=\\\"container\\\">\\n        <div class=\\\"header\\\">\\n            <h1>🥇 Gold Price Update Alert</h1>\\n            <p>{{ $env.TENANT_NAME }} - {{ $json.timestamp }}</p>\\n        </div>\\n        <div class=\\\"content\\\">\\n            <h2>📊 Market Data Summary</h2>\\n            <div class=\\\"market-data\\\">\\n                <p><strong>Gold Price (USD):</strong> ${{ $json.market_data.gold_price_usd }}/oz</p>\\n                <p><strong>Exchange Rate:</strong> {{ $json.market_data.exchange_rate_brl }} BRL/USD</p>\\n                <p><strong>Gold Price (BRL):</strong> R${{ $json.market_data.gold_price_brl_per_gram }}/gram</p>\\n                <p><strong>Silver Price (BRL):</strong> R${{ $json.market_data.silver_price_brl_per_gram }}/gram</p>\\n                <p><strong>Platinum Price (BRL):</strong> R${{ $json.market_data.platinum_price_brl_per_gram }}/gram</p>\\n            </div>\\n            \\n            <h2>📈 Price Update Summary</h2>\\n            <ul>\\n                <li><strong>Products Checked:</strong> {{ $json.update_summary.total_products_checked }}</li>\\n                <li><strong>Products Updated:</strong> {{ $json.update_summary.products_to_update }}</li>\\n                <li><strong>Significant Changes:</strong> {{ $json.update_summary.significant_updates }}</li>\\n                <li><strong>Minor Updates:</strong> {{ $json.update_summary.minor_updates }}</li>\\n            </ul>\\n            \\n            <h2>🔥 Significant Price Changes (>5%)</h2>\\n            {{ $json.products_to_update.filter(p => Math.abs(p.price_change_percent) >= 5).map(product => \\n              `<div class=\\\"price-update significant\\\">\\n                <h4>${product.name} (${product.sku})</h4>\\n                <p><strong>Metal:</strong> ${product.metal_type} ${product.karat}k | <strong>Weight:</strong> ${product.weight}g</p>\\n                <p><strong>Price Change:</strong> \\n                  <span class=\\\"${product.price_change >= 0 ? 'price-change-up' : 'price-change-down'}\\\">\\n                    R$${product.old_price.toFixed(2)} → R$${product.new_price.toFixed(2)} \\n                    (${product.price_change_percent >= 0 ? '+' : ''}${product.price_change_percent.toFixed(1)}%)\\n                  </span>\\n                </p>\\n                <p><strong>Material Cost:</strong> R$${product.material_cost} | <strong>Labor Cost:</strong> R$${product.labor_cost}</p>\\n              </div>`\\n            ).join('') }}\\n            \\n            <h3>📋 Next Steps</h3>\\n            <ol>\\n                <li>Review updated prices in your Odoo dashboard</li>\\n                <li>Check e-commerce platform synchronization</li>\\n                <li>Consider customer communication for significant changes</li>\\n                <li>Monitor market trends for further adjustments</li>\\n            </ol>\\n            \\n            <p><strong>🔗 Quick Links:</strong></p>\\n            <ul>\\n                <li><a href=\\\"https://{{ $env.TENANT_ID }}.odoo.your-domain.com\\\">Odoo Dashboard</a></li>\\n                <li><a href=\\\"https://automation.your-domain.com/webhook/{{ $env.TENANT_ID }}-gold-price-update\\\">Manual Price Update</a></li>\\n            </ul>\\n        </div>\\n        <div class=\\\"footer\\\">\\n            <p>Automated by Max Haider's Multi-Tenant ERP Platform</p>\\n            <p>For support: <a href=\\\"mailto:support@your-domain.com\\\">support@your-domain.com</a></p>\\n        </div>\\n    </div>\\n</body>\\n</html>\"\n      },\n      \"id\": \"send-price-alert-email\",\n      \"name\": \"Send Price Alert Email\",\n      \"type\": \"n8n-nodes-base.emailSend\",\n      \"typeVersion\": 2,\n      \"position\": [1500, 600]\n    },\n    {\n      \"parameters\": {\n        \"respondWith\": \"json\",\n        \"responseBody\": \"{\\n  \\\"status\\\": \\\"success\\\",\\n  \\\"message\\\": \\\"Gold price automation completed\\\",\\n  \\\"tenant_id\\\": \\\"{{ $env.TENANT_ID }}\\\",\\n  \\\"timestamp\\\": \\\"{{ $json.timestamp }}\\\",\\n  \\\"summary\\\": {{ JSON.stringify($json.update_summary) }},\\n  \\\"market_data\\\": {{ JSON.stringify($json.market_data) }}\\n}\"\n      },\n      \"id\": \"return-success-response\",\n      \"name\": \"Return Success Response\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"typeVersion\": 1,\n      \"position\": [1900, 300]\n    },\n    {\n      \"parameters\": {\n        \"respondWith\": \"json\",\n        \"responseBody\": \"{\\n  \\\"status\\\": \\\"no_updates\\\",\\n  \\\"message\\\": \\\"No products meet update criteria\\\",\\n  \\\"tenant_id\\\": \\\"{{ $env.TENANT_ID }}\\\",\\n  \\\"timestamp\\\": \\\"{{ $json.timestamp }}\\\",\\n  \\\"market_data\\\": {{ JSON.stringify($json.market_data) }}\\n}\",\n        \"options\": {\n          \"responseCode\": 200\n        }\n      },\n      \"id\": \"return-no-updates-response\",\n      \"name\": \"Return No Updates Response\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"typeVersion\": 1,\n      \"position\": [1500, 800]\n    }\n  ],\n  \"connections\": {\n    \"cron-gold-price-check\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"prepare-jewelry-config\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"webhook-manual-update\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"prepare-jewelry-config\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"prepare-jewelry-config\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"get-jewelry-pricing-rules\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"get-jewelry-pricing-rules\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"get-precious-metals-prices\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"get-exchange-rates\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"get-jewelry-products\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"get-jewelry-products\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"calculate-jewelry-prices\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"calculate-jewelry-prices\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"check-products-to-update\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"check-significant-changes\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"check-products-to-update\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"split-products-batch\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"return-no-updates-response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"split-products-batch\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"update-odoo-jewelry-prices\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"get-ecommerce-credentials\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"update-odoo-jewelry-prices\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"return-success-response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"get-ecommerce-credentials\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"prepare-ecommerce-jewelry-updates\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"prepare-ecommerce-jewelry-updates\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"split-platform-updates\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"split-platform-updates\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"check-platform-type\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"check-platform-type\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"update-woocommerce-jewelry\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"update-shopify-jewelry\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"check-significant-changes\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"send-price-alert-email\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}