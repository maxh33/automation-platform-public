# ===========================================
# N8N Multi-Tenant Automation Platform - Environment Configuration
# ===========================================

# ===========================================
# DEVELOPMENT SETUP INSTRUCTIONS
# ===========================================
# 1. Copy this file to .env: `cp .env.example .env`
# 2. Replace all placeholder values with your actual configuration
# 3. Generate secure passwords and keys using: `openssl rand -base64 32`
# 4. For local development, you can use default values for most settings

# ===========================================
# N8N CORE CONFIGURATION
# ===========================================

# Domain and Protocol Configuration
# For local development, use localhost and http
# For production, use your actual domain and https
N8N_HOST=localhost
N8N_PROTOCOL=http
WEBHOOK_URL=http://localhost:5678
TIMEZONE=UTC

# N8N Security (ðŸ”´ REQUIRED)
# Generate with: openssl rand -base64 32
N8N_ENCRYPTION_KEY=your-32-character-encryption-key-here
N8N_OWNER_EMAIL=admin@localhost
SESSION_SECRET=your-session-secret-key

# N8N Authentication (Optional for local development)
N8N_BASIC_AUTH_ACTIVE=false
N8N_BASIC_AUTH_USER=admin
N8N_BASIC_AUTH_PASSWORD=your-admin-password

# N8N Advanced Settings
N8N_RUNNERS_ENABLED=true
N8N_SECURE_COOKIE=false
N8N_LOG_LEVEL=info
N8N_LOG_OUTPUT=console
N8N_ONBOARDING_FLOW_DISABLED=false
N8N_EXECUTIONS_DATA_SAVE_ON_SUCCESS=first
N8N_EXECUTIONS_DATA_MAX_AGE=168

# ===========================================
# DATABASE CONFIGURATION
# ===========================================

# PostgreSQL Settings (ðŸ”´ REQUIRED)
POSTGRES_DB=n8n
POSTGRES_USER=n8n
POSTGRES_PASSWORD=your-secure-database-password

# ===========================================
# REDIS CONFIGURATION
# ===========================================

# Redis Authentication (ðŸ”´ REQUIRED)
REDIS_PASSWORD=your-secure-redis-password

# ===========================================
# AI PROVIDERS CONFIGURATION
# ===========================================
# These are optional for basic functionality
# Required for AI-powered web scraping and content generation workflows

# Google Gemini API (Primary for content generation)
GEMINI_API_KEY=your-gemini-api-key
BACKUP_GEMINI_API_KEY=your-backup-gemini-api-key

# Additional AI Providers (Optional)
COHERE_API_KEY=your-cohere-api-key
COHERE_MODEL=command
MISTRAL_API_KEY=your-mistral-api-key
MISTRAL_MODEL=mistral-medium
HUGGING_FACE_API_KEY=your-huggingface-api-key

# ===========================================
# AWS INTEGRATION (OPTIONAL)
# ===========================================
# Required only for AWS Secrets Manager integration
# Can be left empty for local development

AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key
AWS_DEFAULT_REGION=us-east-1

# S3 Backup Configuration (Optional)
S3_BUCKET=your-backup-bucket
S3_ENDPOINT=https://s3.amazonaws.com

# ===========================================
# MULTI-TENANT EXAMPLES
# ===========================================
# Examples of tenant configuration
# Replace with your actual client configurations

# Default Tenant
CLIENT_TENANT_ID=default
CLIENT_DEFAULT_WEBHOOK_URL=http://localhost:5678/webhook/default

# Example Client 1
CLIENT_DEMO_TENANT_ID=demo
CLIENT_DEMO_WEBHOOK_URL=http://localhost:5678/webhook/demo

# Example Client 2
CLIENT_EXAMPLE_TENANT_ID=example-corp
CLIENT_EXAMPLE_WEBHOOK_URL=http://localhost:5678/webhook/example-corp

# ===========================================
# SOCIAL MEDIA API CONFIGURATION
# ===========================================
# Note: For production, store these in AWS Secrets Manager
# These are examples for local development testing

# Instagram API (Example - Get from Meta Developer Console)
INSTAGRAM_ACCESS_TOKEN=your-instagram-access-token
INSTAGRAM_ACCOUNT_ID=your-instagram-account-id

# LinkedIn API (Example - Get from LinkedIn Developer Console)
LINKEDIN_ACCESS_TOKEN=your-linkedin-access-token
LINKEDIN_PERSON_ID=your-linkedin-person-id

# Twitter/X API (Example - Get from Twitter Developer Portal)
TWITTER_API_KEY=your-twitter-api-key
TWITTER_API_SECRET=your-twitter-api-secret
TWITTER_ACCESS_TOKEN=your-twitter-access-token
TWITTER_ACCESS_TOKEN_SECRET=your-twitter-access-token-secret

# ===========================================
# EMAIL CONFIGURATION
# ===========================================
# For sending notifications and reports

EMAIL_HOST=smtp.your-provider.com
EMAIL_PORT=587
EMAIL_USER=your-email@domain.com
EMAIL_PASS=your-email-password
EMAIL_FROM=noreply@your-domain.com

# ===========================================
# MONITORING CONFIGURATION
# ===========================================
# Optional monitoring services

# Prometheus Metrics
PROMETHEUS_ENABLED=true
PROMETHEUS_PORT=9090

# Grafana Dashboard (if using external Grafana)
GRAFANA_ENABLED=false
GRAFANA_PORT=3001

# ===========================================
# SECURITY CONFIGURATION
# ===========================================

# Rate Limiting (requests per minute/hour per tenant)
WEBHOOK_RATE_LIMIT=100
API_RATE_LIMIT=1000

# Session Configuration
SESSION_TIMEOUT=24h

# CORS Configuration (for web interfaces)
CORS_ORIGINS=http://localhost:5678

# ===========================================
# BACKUP CONFIGURATION
# ===========================================

# Backup Retention Settings
BACKUP_RETENTION_DAYS=30
BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM UTC

# Local Backup Paths (adjust for your system)
BACKUP_DIR=./backups
LOG_DIR=./logs

# ===========================================
# LOGGING CONFIGURATION
# ===========================================

# Log Levels (debug, info, warn, error)
LOG_LEVEL=info
LOG_FORMAT=json

# Audit Logging
AUDIT_LOG_ENABLED=true
AUDIT_LOG_RETENTION_DAYS=90

# ===========================================
# QUICK START GUIDE
# ===========================================
#
# 1. Minimal setup for local development:
#    - Set N8N_ENCRYPTION_KEY (generate with: openssl rand -base64 32)
#    - Set POSTGRES_PASSWORD (any secure password)
#    - Set REDIS_PASSWORD (any secure password)
#    - Set SESSION_SECRET (generate with: openssl rand -base64 32)
#
# 2. Run the platform:
#    docker-compose up -d
#
# 3. Access N8N at: http://localhost:5678
#
# 4. Import workflow templates from ./workflows/templates/
#
# 5. Configure webhooks for your tenants using the patterns:
#    http://localhost:5678/webhook/{tenant-id}-{service}
#
# For production deployment, review docker-compose.prod.yml
# and set up proper domain, SSL, and external services.